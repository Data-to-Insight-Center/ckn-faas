# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import iluvatar_rpc_pb2 as iluvatar__rpc__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in iluvatar_rpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class IluvatarWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
                '/iluvatar_rpc.IluvatarWorker/ping',
                request_serializer=iluvatar__rpc__pb2.PingRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.PingResponse.FromString,
                _registered_method=True)
        self.prewarm = channel.unary_unary(
                '/iluvatar_rpc.IluvatarWorker/prewarm',
                request_serializer=iluvatar__rpc__pb2.PrewarmRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.PrewarmResponse.FromString,
                _registered_method=True)
        self.invoke = channel.unary_unary(
                '/iluvatar_rpc.IluvatarWorker/invoke',
                request_serializer=iluvatar__rpc__pb2.InvokeRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.InvokeResponse.FromString,
                _registered_method=True)
        self.invoke_async = channel.unary_unary(
                '/iluvatar_rpc.IluvatarWorker/invoke_async',
                request_serializer=iluvatar__rpc__pb2.InvokeAsyncRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.InvokeAsyncResponse.FromString,
                _registered_method=True)
        self.invoke_async_check = channel.unary_unary(
                '/iluvatar_rpc.IluvatarWorker/invoke_async_check',
                request_serializer=iluvatar__rpc__pb2.InvokeAsyncLookupRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.InvokeResponse.FromString,
                _registered_method=True)
        self.register = channel.unary_unary(
                '/iluvatar_rpc.IluvatarWorker/register',
                request_serializer=iluvatar__rpc__pb2.RegisterRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.health = channel.unary_unary(
                '/iluvatar_rpc.IluvatarWorker/health',
                request_serializer=iluvatar__rpc__pb2.HealthRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.status = channel.unary_unary(
                '/iluvatar_rpc.IluvatarWorker/status',
                request_serializer=iluvatar__rpc__pb2.StatusRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.clean = channel.unary_unary(
                '/iluvatar_rpc.IluvatarWorker/clean',
                request_serializer=iluvatar__rpc__pb2.CleanRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.CleanResponse.FromString,
                _registered_method=True)
        self.list_registered_funcs = channel.unary_unary(
                '/iluvatar_rpc.IluvatarWorker/list_registered_funcs',
                request_serializer=iluvatar__rpc__pb2.ListFunctionRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.ListFunctionResponse.FromString,
                _registered_method=True)


class IluvatarWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def prewarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def invoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def invoke_async(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def invoke_async_check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def health(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clean(self, request, context):
        """Instruct the worker to remove all containers it has created
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_registered_funcs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IluvatarWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=iluvatar__rpc__pb2.PingRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.PingResponse.SerializeToString,
            ),
            'prewarm': grpc.unary_unary_rpc_method_handler(
                    servicer.prewarm,
                    request_deserializer=iluvatar__rpc__pb2.PrewarmRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.PrewarmResponse.SerializeToString,
            ),
            'invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.invoke,
                    request_deserializer=iluvatar__rpc__pb2.InvokeRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.InvokeResponse.SerializeToString,
            ),
            'invoke_async': grpc.unary_unary_rpc_method_handler(
                    servicer.invoke_async,
                    request_deserializer=iluvatar__rpc__pb2.InvokeAsyncRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.InvokeAsyncResponse.SerializeToString,
            ),
            'invoke_async_check': grpc.unary_unary_rpc_method_handler(
                    servicer.invoke_async_check,
                    request_deserializer=iluvatar__rpc__pb2.InvokeAsyncLookupRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.InvokeResponse.SerializeToString,
            ),
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=iluvatar__rpc__pb2.RegisterRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.RegisterResponse.SerializeToString,
            ),
            'health': grpc.unary_unary_rpc_method_handler(
                    servicer.health,
                    request_deserializer=iluvatar__rpc__pb2.HealthRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.HealthResponse.SerializeToString,
            ),
            'status': grpc.unary_unary_rpc_method_handler(
                    servicer.status,
                    request_deserializer=iluvatar__rpc__pb2.StatusRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.StatusResponse.SerializeToString,
            ),
            'clean': grpc.unary_unary_rpc_method_handler(
                    servicer.clean,
                    request_deserializer=iluvatar__rpc__pb2.CleanRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.CleanResponse.SerializeToString,
            ),
            'list_registered_funcs': grpc.unary_unary_rpc_method_handler(
                    servicer.list_registered_funcs,
                    request_deserializer=iluvatar__rpc__pb2.ListFunctionRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.ListFunctionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iluvatar_rpc.IluvatarWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('iluvatar_rpc.IluvatarWorker', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IluvatarWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarWorker/ping',
            iluvatar__rpc__pb2.PingRequest.SerializeToString,
            iluvatar__rpc__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def prewarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarWorker/prewarm',
            iluvatar__rpc__pb2.PrewarmRequest.SerializeToString,
            iluvatar__rpc__pb2.PrewarmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarWorker/invoke',
            iluvatar__rpc__pb2.InvokeRequest.SerializeToString,
            iluvatar__rpc__pb2.InvokeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def invoke_async(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarWorker/invoke_async',
            iluvatar__rpc__pb2.InvokeAsyncRequest.SerializeToString,
            iluvatar__rpc__pb2.InvokeAsyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def invoke_async_check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarWorker/invoke_async_check',
            iluvatar__rpc__pb2.InvokeAsyncLookupRequest.SerializeToString,
            iluvatar__rpc__pb2.InvokeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarWorker/register',
            iluvatar__rpc__pb2.RegisterRequest.SerializeToString,
            iluvatar__rpc__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarWorker/health',
            iluvatar__rpc__pb2.HealthRequest.SerializeToString,
            iluvatar__rpc__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarWorker/status',
            iluvatar__rpc__pb2.StatusRequest.SerializeToString,
            iluvatar__rpc__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def clean(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarWorker/clean',
            iluvatar__rpc__pb2.CleanRequest.SerializeToString,
            iluvatar__rpc__pb2.CleanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def list_registered_funcs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarWorker/list_registered_funcs',
            iluvatar__rpc__pb2.ListFunctionRequest.SerializeToString,
            iluvatar__rpc__pb2.ListFunctionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class IluvatarControllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
                '/iluvatar_rpc.IluvatarController/ping',
                request_serializer=iluvatar__rpc__pb2.PingRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.PingResponse.FromString,
                _registered_method=True)
        self.prewarm = channel.unary_unary(
                '/iluvatar_rpc.IluvatarController/prewarm',
                request_serializer=iluvatar__rpc__pb2.PrewarmRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.PrewarmResponse.FromString,
                _registered_method=True)
        self.invoke = channel.unary_unary(
                '/iluvatar_rpc.IluvatarController/invoke',
                request_serializer=iluvatar__rpc__pb2.InvokeRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.InvokeResponse.FromString,
                _registered_method=True)
        self.invoke_async = channel.unary_unary(
                '/iluvatar_rpc.IluvatarController/invoke_async',
                request_serializer=iluvatar__rpc__pb2.InvokeAsyncRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.InvokeAsyncResponse.FromString,
                _registered_method=True)
        self.invoke_async_check = channel.unary_unary(
                '/iluvatar_rpc.IluvatarController/invoke_async_check',
                request_serializer=iluvatar__rpc__pb2.InvokeAsyncLookupRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.InvokeResponse.FromString,
                _registered_method=True)
        self.register = channel.unary_unary(
                '/iluvatar_rpc.IluvatarController/register',
                request_serializer=iluvatar__rpc__pb2.RegisterRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.register_worker = channel.unary_unary(
                '/iluvatar_rpc.IluvatarController/register_worker',
                request_serializer=iluvatar__rpc__pb2.RegisterWorkerRequest.SerializeToString,
                response_deserializer=iluvatar__rpc__pb2.RegisterWorkerResponse.FromString,
                _registered_method=True)


class IluvatarControllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def prewarm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def invoke(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def invoke_async(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def invoke_async_check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register_worker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IluvatarControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=iluvatar__rpc__pb2.PingRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.PingResponse.SerializeToString,
            ),
            'prewarm': grpc.unary_unary_rpc_method_handler(
                    servicer.prewarm,
                    request_deserializer=iluvatar__rpc__pb2.PrewarmRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.PrewarmResponse.SerializeToString,
            ),
            'invoke': grpc.unary_unary_rpc_method_handler(
                    servicer.invoke,
                    request_deserializer=iluvatar__rpc__pb2.InvokeRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.InvokeResponse.SerializeToString,
            ),
            'invoke_async': grpc.unary_unary_rpc_method_handler(
                    servicer.invoke_async,
                    request_deserializer=iluvatar__rpc__pb2.InvokeAsyncRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.InvokeAsyncResponse.SerializeToString,
            ),
            'invoke_async_check': grpc.unary_unary_rpc_method_handler(
                    servicer.invoke_async_check,
                    request_deserializer=iluvatar__rpc__pb2.InvokeAsyncLookupRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.InvokeResponse.SerializeToString,
            ),
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=iluvatar__rpc__pb2.RegisterRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.RegisterResponse.SerializeToString,
            ),
            'register_worker': grpc.unary_unary_rpc_method_handler(
                    servicer.register_worker,
                    request_deserializer=iluvatar__rpc__pb2.RegisterWorkerRequest.FromString,
                    response_serializer=iluvatar__rpc__pb2.RegisterWorkerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iluvatar_rpc.IluvatarController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('iluvatar_rpc.IluvatarController', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IluvatarController(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarController/ping',
            iluvatar__rpc__pb2.PingRequest.SerializeToString,
            iluvatar__rpc__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def prewarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarController/prewarm',
            iluvatar__rpc__pb2.PrewarmRequest.SerializeToString,
            iluvatar__rpc__pb2.PrewarmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def invoke(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarController/invoke',
            iluvatar__rpc__pb2.InvokeRequest.SerializeToString,
            iluvatar__rpc__pb2.InvokeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def invoke_async(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarController/invoke_async',
            iluvatar__rpc__pb2.InvokeAsyncRequest.SerializeToString,
            iluvatar__rpc__pb2.InvokeAsyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def invoke_async_check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarController/invoke_async_check',
            iluvatar__rpc__pb2.InvokeAsyncLookupRequest.SerializeToString,
            iluvatar__rpc__pb2.InvokeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarController/register',
            iluvatar__rpc__pb2.RegisterRequest.SerializeToString,
            iluvatar__rpc__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def register_worker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iluvatar_rpc.IluvatarController/register_worker',
            iluvatar__rpc__pb2.RegisterWorkerRequest.SerializeToString,
            iluvatar__rpc__pb2.RegisterWorkerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
